function __Styles(){planeStyle={fillColor:new RgbColor(.75,.91,.94,.5),strokeColor:"#255b63",strokeWidth:1},planeSelectedStyle={fillColor:new RgbColor(.15,.36,.39,.7)},clickableAreaStyle={fillColor:new RgbColor(1,1,.6,1),strokeColor:"#255b63",strokeWidth:1},typeDivCss={position:"absolute",color:"#c90",border:"2px solid #c90",backgroundColor:"#900",width:"140px",height:"50px",top:"40px",right:"100px",fontWeight:"bold",lineHeight:"46px",textAlign:"center",boxSizing:"border-box"},notExistDivCss={position:"absolute",color:"#cfc",border:"2px outset #afa",backgroundColor:"#363",width:"70px",height:"50px",top:"40px",right:"10px",lineHeight:"46px",textAlign:"center",borderRadius:"25px",boxSizing:"border-box"},notExistDivSelectedCss={toString:function(){return"background-color:#030 !important; border:2px inset #afa !important;"}}}function ClickableArea(a){this.plane=a,this.matrix=this.plane.matrix,this.setParent=function(a){return this.parent=a,this.matrix=this.parent.matrix,this},this.draw=function(){var a=new Path,b=projectPoint(this.plane.centerPoint,this.matrix);for(var c=0;c<=this.plane.points.length;c++){var d=projectPoint(this.plane.points[c%this.plane.points.length],this.matrix),e=b.findPointTo(d,20,!0);a.add(Math.floor(e.x)+.5,Math.floor(e.y)+.5)}return a.closed=!0,a.class="ClickableArea",a.set_style(clickableAreaStyle),this.shape=a,a}}function RectangularPrisim(a,b,c,d){this.centerPoint=a;var e=a.x,f=a.y,g=b*5;a=[],a[0]=new Point3(-b*.5,-c*.5,+d*.5),a[1]=new Point3(-b*.5,+c*.5,+d*.5),a[2]=new Point3(+b*.5,+c*.5,+d*.5),a[3]=new Point3(+b*.5,-c*.5,+d*.5),a[4]=new Point3(-b*.5,-c*.5,-d*.5),a[5]=new Point3(-b*.5,+c*.5,-d*.5),a[6]=new Point3(+b*.5,+c*.5,-d*.5),a[7]=new Point3(+b*.5,-c*.5,-d*.5),this.matrix=Util.createProjectionMatrixForObjectAt(e,f),this.planes=[],this.planes.push((new Plane([a[0],a[1],a[2],a[3]])).setParent(this)),this.planes.push((new Plane([a[4],a[5],a[6],a[7]])).setParent(this)),this.planes.push((new Plane([a[0],a[1],a[5],a[4]])).setParent(this)),this.planes.push((new Plane([a[3],a[2],a[6],a[7]])).setParent(this)),this.planes.push((new Plane([a[0],a[3],a[7],a[4]])).setParent(this)),this.planes.push((new Plane([a[1],a[2],a[6],a[5]])).setParent(this)),$(this.planes).each(function(a,b){this.set_style(planeStyle)}),this.draw=function(){var a=[];this.planes.sort(Plane.compare);for(var b=0;b<this.planes.length;b++)a.push(this.planes[b].draw());return a.class="RectangularPrisim",a}}function TrianglePrisim(a,b,c,d){this.centerPoint=a;var e=a.x,f=a.y,g=b*5;a=[],a[0]=new Point3(-b*.5,-c*.5,+d*0),a[3]=new Point3(+b*.5,-c*.5,+d*.5),a[4]=new Point3(+b*.5,-c*.5,-d*.5),a[1]=new Point3(-b*.5,+c*.5,+d*0),a[2]=new Point3(+b*.5,+c*.5,+d*.5),a[5]=new Point3(+b*.5,+c*.5,-d*.5),this.matrix=Util.createProjectionMatrixForObjectAt(e,f),this.planes=[],this.planes.push((new Plane([a[0],a[1],a[2],a[3]])).setParent(this)),this.planes.push((new Plane([a[5],a[4],a[0],a[1]])).setParent(this)),this.planes.push((new Plane([a[2],a[3],a[4],a[5]])).setParent(this)),this.planes.push((new Plane([a[1],a[2],a[5]])).setParent(this)),this.planes.push((new Plane([a[0],a[3],a[4]])).setParent(this)),$(this.planes).each(function(a,b){this.set_style(planeStyle)}),this.draw=function(){var a=[];this.planes.sort(Plane.compare);for(var b=0;b<this.planes.length;b++)a.push(this.planes[b].draw());return a.class="RectangularPrisim",a}}function Pyramid(a,b,c,d){this.centerPoint=a;var e=a.x,f=a.y,g=b*5;a=[],a[0]=new Point3(-b*0,-c*.5,+d*0),a[1]=new Point3(-b*.4,+c*.5,+d*.5),a[2]=new Point3(+b*.6,+c*.5,+d*.5),a[5]=new Point3(+b*.5,+c*.5,-d*.5),a[6]=new Point3(-b*.5,+c*.5,-d*.5),this.matrix=Util.createProjectionMatrixForObjectAt(e,f),this.planes=[],this.planes.push((new Plane([a[0],a[1],a[2]])).setParent(this)),this.planes.push((new Plane([a[0],a[2],a[5]])).setParent(this)),this.planes.push((new Plane([a[0],a[5],a[6]])).setParent(this)),this.planes.push((new Plane([a[0],a[6],a[1]])).setParent(this)),this.planes.push((new Plane([a[1],a[2],a[5],a[6]])).setParent(this)),$(this.planes).each(function(a,b){this.set_style(planeStyle)}),this.draw=function(){var a=[];this.planes.sort(Plane.compare);for(var b=0;b<this.planes.length;b++)a.push(this.planes[b].draw());return a.class="RectangularPrisim",a}}function Cylinder(a,b,c){this.centerPoint=a;var d=a.x,e=a.y,f=b*5;a=[],this.matrix=Util.createProjectionMatrixForObjectAt(d,e),this.planes=[],this.planes.push((new CircularPlane([new Point3(0,c*.5,0)],b*.5)).setParent(this)),this.planes.push((new CircularPlane([new Point3(0,-c*.5,0)],b*.5)).setParent(this)),$(this.planes).each(function(a,b){this.set_style(planeStyle)}),this.draw=function(){var a=[];this.planes.sort(Plane.compare);for(var b=0;b<this.planes.length;b++)a.push(this.planes[b].draw());var c=new Path;c.add(a[1].points[3]),c.cubicCurveTo(a[1].points[2],a[1].points[1],a[1].points[0]),c.add(a[1].extremePoints[1]),c.add(a[0].extremePoints[1]),c.add(a[0].points[0]),c.cubicCurveTo(a[0].points[1],a[0].points[2],a[0].points[3]),c.add(a[0].extremePoints[0]),c.add(a[1].extremePoints[0]),c.closed=!0,a[1].insertAbove(c),c.set_style(planeStyle);var d=new Path;return d.add(a[1].points[3]),d.cubicCurveTo(a[1].points[4],a[1].points[5],a[1].points[0]),d.add(a[1].extremePoints[1]),d.add(a[0].extremePoints[1]),d.add(a[0].points[0]),d.cubicCurveTo(a[0].points[5],a[0].points[4],a[0].points[3]),d.add(a[0].extremePoints[0]),d.add(a[1].extremePoints[0]),d.closed=!0,a[1].insertAbove(d),d.set_style(planeStyle),a.class="RectangularPrisim",a}}function projectPoint(a,b){if(a==undefined)throw"p is not defined";if(b==undefined)throw"matrix is not defined";return Util.project([a.x,a.y,a.z],b)}var Animation={init:function(a){Animation.container=a}},Interaction={getFramework:function(){return"paper"},_types:{PARALLEL:"Paralel Düzlemler",INTERSECTING:"Kesişen Düzlemler"},init:function(a){Interaction.container=a,Main.setObjective("Yandaki geometrik cisimlerin istenen paralel ya da kesişen düzlem ikilisine fare ile tıklayarak gösteriniz. Olmayanlar için “Yok” düğmesine tıklayınız."),Interaction.paper={width:$(a).width(),height:$(a).height()},Interaction.appendStatus({bottom:"30px",right:"40px",textAlign:"right",lineHeight:"20px"}),Interaction.appendButton({bottom:"70px",right:"40px"}),Interaction.typeDiv=document.createElement("div"),$(a).append(Interaction.typeDiv),$(Interaction.typeDiv).attr("id","typeDiv").css(typeDivCss),Interaction.notExistDiv=document.createElement("div"),$(a).append(Interaction.notExistDiv),$(Interaction.notExistDiv).attr({id:"notExistDiv",__selected:"false"}).css(notExistDivCss).html("Yok").click(function(){$(this).attr("__selected")=="false"?($(this).attr("__selected","true"),$(this).addClass("selected"),Interaction.deselectPlanes()):($(this).attr("__selected","false"),$(this).removeClass("selected"))}),Interaction.notExistDiv.deselect=function(){$(Interaction.notExistDiv).attr("__selected","false"),$(Interaction.notExistDiv).removeClass("selected")},Interaction.notExistDiv.isSelected=function(){return $(Interaction.notExistDiv).attr("__selected")=="true"?!0:!1},$(a).append("<style>#notExistDiv.selected { "+notExistDivSelectedCss.toString()+" }</style>"),Interaction.setRandomGenerator(8),Interaction.prepareNextQuestion()},nextQuestion:function(a){Interaction.createTool(),Main.interactionProject.activeLayer.removeChildren(),Interaction.qType=Util.rand01()==0?Interaction._types.INTERSECTING:Interaction._types.PARALLEL,$(Interaction.typeDiv).html(Interaction.qType),a=5,Interaction.shapeType=a;switch(a){case 0:var b=new RectangularPrisim(new Point(150,150),100,100,100);Interaction.shape=b.draw();break;case 1:var b=new RectangularPrisim(new Point(150,150),75,150,75);Interaction.shape=b.draw();break;case 2:var b=new RectangularPrisim(new Point(150,150),125,75,150);Interaction.shape=b.draw();break;case 3:var c=new TrianglePrisim(new Point(150,150),100,100,100);Interaction.shape=c.draw();break;case 5:var d=new Pyramid(new Point(150,125),150,150,150);Interaction.shape=d.draw();break;case 4:var e=new Cylinder(new Point(150,125),150,150,150);Interaction.shape=e.draw();break;case 6:case 7:}},preCheck:function(){return!Interaction.notExistDiv.isSelected()&&Interaction.getSelectedPlanes().length<2?(Interaction.setStatus("Lütfen iki adet düzlem seçiniz","alert"),!1):!0},isAnswerCorrect:function(a){switch(Interaction.shapeType){case 0:case 1:case 2:case 3:if(Interaction.notExistDiv.isSelected())return!1;var b=Interaction.getSelectedPlanes();if(Interaction.qType==Interaction._types.INTERSECTING)return!b[0].isParallelTo(b[1]);if(Interaction.qType==Interaction._types.PARALLEL)return b[0].isParallelTo(b[1]);break;case 5:if(Interaction.qType==Interaction._types.PARALLEL&&Interaction.notExistDiv.isSelected())return!0;if(Interaction.qType==Interaction._types.INTERSECTING&&!Interaction.notExistDiv.isSelected())return!0;return!1;case 4:case 6:case 7:}},onCorrectAnswer:function(){},onWrongAnswer:function(){},onFail:function(){Interaction.pause=!0,Interaction.deselectPlanes();var a=[];switch(Interaction.shapeType){case 0:case 1:case 2:case 3:Interaction.qType==Interaction._types.INTERSECTING&&(Interaction.setStatus("Yanlış cevap. Kesişen düzlemler var. <br/> Kesişen düzlemlerin bazılarını şeklin üzerinde görebilirsiniz.",!1),a=Interaction.getIntersectingPlanePairs()),Interaction.qType==Interaction._types.PARALLEL&&(Interaction.setStatus("Yanlış cevap. Paralel düzlemler var. <br/> Paralel düzlemleri şeklin üzerinde görebilirsiniz.",!1),a=Interaction.getParellelPlanePairs());case 4:Interaction.qType==Interaction._types.PARALLEL&&Interaction.setStatus("Yanlış cevap. Paralel düzlemler yok.",!1),Interaction.qType==Interaction._types.INTERSECTING&&(Interaction.setStatus("Yanlış cevap. Kesişen düzlemler var. <br/> Kesişen düzlemlerin bazılarını şeklin üzerinde görebilirsiniz.",!1),a=Interaction.getIntersectingPlanePairs());case 6:Interaction.qType==Interaction._types.PARALLEL&&Interaction.setStatus("Yanlış cevap. Paralel düzlemler yok.",!1),Interaction.qType==Interaction._types.INTERSECTING&&Interaction.setStatus("Yanlış cevap. Kesişen düzlemler yok.",!1);case 7:Interaction.qType==Interaction._types.PARALLEL&&Interaction.setStatus("Yanlış cevap. Paralel düzlemler yok.",!1),Interaction.qType==Interaction._types.INTERSECTING&&Interaction.setStatus("Yanlış cevap. Kesişen düzlemler yok.",!1)}$(a).each(function(a,b){$(this).each(function(){this.shape.animate({style:{fillColor:planeSelectedStyle.fillColor},duration:500,delay:2e3*(a+1),animationType:"easeOut",callback:function(){this.animate({style:{fillColor:planeStyle.fillColor},duration:500,animationType:"easeIn",delay:700})}})})}),a.length>0&&setTimeout("Interaction.pause = false",2e3+a.length*2e3)},getParellelPlanePairs:function(){return Interaction.getPlanePairs("parallel")},getIntersectingPlanePairs:function(){return Interaction.getPlanePairs("intersecting")},getPlanePairs:function(a){function c(a){a.class=="Plane"?b.push({plane:a.plane,hasParallel:!1}):$(a.children).each(function(a,b){c(this)})}if(a!="parallel"&&a!="intersecting")throw'getPlanePairs: please specify type. type can only be "parallel" or "intersecting"';var b=[];c(Main.interactionProject.activeLayer);var d=[];for(var e=0;e<b.length;e++)for(var f=0;f<b.length;f++){if(e==f||b[e].hasParallel==1||b[f].hasParallel==1)continue;if(a=="parallel"&&b[e].plane.isParallelTo(b[f].plane)||a=="intersecting"&&!b[e].plane.isParallelTo(b[f].plane))b[e].hasParallel=!0,b[f].hasParallel=!0,d.push([b[e].plane,b[f].plane])}return d},getSelectedPlanes:function(){function b(c){c.class=="ClickableArea"&&c.plane.plane.isSelected()?a.push(c.plane.plane):$(c.children).each(function(a,c){b(this)})}var a=[];return b(Main.interactionProject.activeLayer),a},deselectPlanes:function(){function a(b){b.class=="ClickableArea"?(b.plane.set_style(planeStyle),b.plane.plane.isPlaneSelected=!1):$(b.children).each(function(b,c){a(this)})}Interaction.tool.count=0,a(Main.interactionProject.activeLayer)},createTool:function(){Interaction.tool=new Tool,Interaction.tool.count=0,Interaction.tool.onMouseDown=function(a){$(Main.interactionProject.activeLayer.getItemsByClass("ClickableArea")).each(function(b,c){this.bounds.contains(a.point)&&(a.item=this)}),a.item!=null&&(a.item.plane.plane.isSelected()==0?this.count<2&&(a.item.plane.plane.select(),this.count++,Interaction.notExistDiv.deselect()):(a.item.plane.plane.deselect(),this.count--))},Interaction.tool.activate()}},Plane=Class.extend({init:function(a){this.points=a,this.centerPoint=Util.centerOfPoint3s(this.points),this.clickableArea=new ClickableArea(this),this.isPlaneSelected=!1},setParent:function(a){return this.parent=a,this.matrix=this.parent.matrix,this.clickableArea.setParent(this),this},isParallelTo:function(a){var b=this.getNormal(),c=a.getNormal(),d=b.dot(c),e=b.dot(c);return d==1||e==-1?!0:!1},getNormal:function(){var a=this.points[1].subtract(this.points[0]),b=this.points[2].subtract(this.points[0]),c=a.cross(b);return c.normalize()},isSelected:function(){return this.isPlaneSelected},select:function(a){a||(a=0),Interaction.pause=!0,this.shape.animate({style:{fillColor:planeSelectedStyle.fillColor},duration:a,callback:function(){this.plane.isPlaneSelected=!0,Interaction.pause=!1}})},deselect:function(a){a||(a=0),Interaction.pause=!0,this.shape.animate({style:{fillColor:planeStyle.fillColor},duration:a,callback:function(){this.plane.isPlaneSelected=!1,Interaction.pause=!1}})},set_style:function(a){this.style=a},draw:function(){var a=new Path;for(var b=0;b<this.points.length;b++)a.add(projectPoint(this.points[b],this.matrix));return a.closed=!0,this.style&&a.set_style(this.style),a.class="Plane",a.isPlaneSelected=!1,a.plane=this,a.clickableArea=this.clickableArea.draw(),a.clickableArea.plane=a,this.shape=a,a}}),CircularPlane=Plane.extend({init:function(a,b){this._super(a),this.point=a[0],this.radius=b},draw:function(){var a=new Path,b=[],c=this.point.add(new Point3(this.radius,0,0));for(var d=0;d<6;d++){var e=c.getRotatedPointByY(Math.PI*2*d/6,this.point);b.push(e)}var f=0,g=99.4104;b[2]=b[3].add(new Point3(f,0,-g)),b[4]=b[3].add(new Point3(f,0,g)),b[1]=b[0].add(new Point3(-f,0,-g)),b[5]=b[0].add(new Point3(-f,0,g));for(d=0;d<6;d++);var h=this.matrix,h=Util.createProjectionMatrixForObjectAt(150,150,1500);$(b).each(function(a,c){var d=projectPoint(this,h);b[a]=d}),a.add(b[0]),a.cubicCurveTo(b[1],b[2],b[3]),a.add(b[3]),a.cubicCurveTo(b[4],b[5],b[0]),a.points=b,a.extremePoints=[];for(var d=0;d<1e3;d++){var e=new Point(a.bounds.x,a.bounds.y+d);if(a.hitTest(e,{stroke:!0,tolerance:0})){a.extremePoints.push(e);break}}for(var d=0;d<1e3;d++){var e=new Point(a.bounds.x+a.bounds.width,a.bounds.y+d);if(a.hitTest(e,{stroke:!0,tolerance:0})){a.extremePoints.push(e);break}}return a.closed=!0,this.style&&a.set_style(this.style),a.class="Plane",a.isPlaneSelected=!1,a.plane=this,this.shape=a,a}});Plane.compare=function(a,b){var c=a.centerPoint,d=b.centerPoint;return c.z>d.z?-1:c.z<d.z?1:c.y<d.y?1:c.y>d.y?-1:c.x>d.x?1:c.x<d.x?-1:0};